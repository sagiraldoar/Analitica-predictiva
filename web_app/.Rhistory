X <-model.matrix(NRO_ACCIDENTES~.- FECHA - PERIODO - MES_1 -
SEMANA_01 - DIA_1 - DIA_NOMBRE_LUNES,train)[,-1]
y <- train$NRO_ACCIDENTES
grid<-10^seq(10,-4,length=100)
modelo_lasso<-cv.glmnet(X,y,alpha=1,lambda=grid) # alpha=1 es lasso
lambda_opt<-modelo_lasso$lambda.min
modelo_lasso<-glmnet(X,y,alpha=1,lambda = lambda_opt)
pred<-predict(modelo_lasso,model.matrix(NRO_ACCIDENTES~.- FECHA - PERIODO - MES_1 -
SEMANA_01 - DIA_1 - DIA_NOMBRE_LUNES,train)[,-1])
cat(" MSE_t:",mean((pred-train$NRO_ACCIDENTES)^2))
pred<-predict(modelo_lasso,model.matrix(NRO_ACCIDENTES~.- FECHA - PERIODO - MES_1 -
SEMANA_01 - DIA_1 - DIA_NOMBRE_LUNES,validation)[,-1])
cat(" MSE_v:",mean((pred-validation$NRO_ACCIDENTES)^2))
library(randomForest)
rf_model <- randomForest(NRO_ACCIDENTES~.-FECHA-PERIODO,data=train,ntree=2000)
pred=predict(rf_model,train)
cat(" MSE_t",mean((pred-train$NRO_ACCIDENTES)^2))
pred=predict( rf_model,validation)
cat(" MSE_v:",mean((pred-validation$NRO_ACCIDENTES)^2))
df_modelo <- dummy_cols(df, select_columns = c('MES','DIA','DIA_NOMBRE'))
df_modelo$MES <- NULL
df_modelo$SEMANA <- NULL
df_modelo$DIA <- NULL
df_modelo$DIA_NOMBRE <- NULL
# se divide el conjunto de datos en entrenamiento y validación
train <- df_modelo[df_modelo$PERIODO < 2018,]
validation<- df_modelo[df_modelo$PERIODO == 2018,]
# se genera el modelo de regresión lineal, y como una variable categorica se puede representar como k-1 variables dummies, se elimina una de cada variable inicial
modelo_lm <- lm(NRO_ACCIDENTES~.-FECHA-PERIODO-MES_1-DIA_1-DIA_NOMBRE_LUNES,data=train)
summary(modelo_lm)
cat(" AIC:",AIC(modelo_lm))
pred=predict(modelo_lm,train)
cat(" MSE_t:",mean((pred-train$NRO_ACCIDENTES)^2))
pred=predict(modelo_lm,validation)
cat(" MSE_v:",mean((pred-validation$NRO_ACCIDENTES)^2))
#se elimina la variable ANIO_REFERENCIA
df_modelo$ANIO_REFERENCIA <- NULL
#se divide el conjunto de datos en entrenamiento y validación
train <- df_modelo[df_modelo$PERIODO < 2018,]
validation<- df_modelo[df_modelo$PERIODO == 2018,]
# se genera el modelo de regresión linea, y como una variable categorica se puede representar como k-1 variables dummues, se elimina una de cada variable inicial
modelo_lm <- lm(NRO_ACCIDENTES~.-FECHA-PERIODO-MES_1-DIA_1-DIA_NOMBRE_LUNES ,data=train)
summary(modelo_lm)
cat(" AIC:",AIC(modelo_lm))
pred=predict(modelo_lm,train)
cat(" MSE_t:",mean((pred-train$NRO_ACCIDENTES)^2))
pred=predict(modelo_lm,validation)
cat(" MSE_v:",mean((pred-validation$NRO_ACCIDENTES)^2))
modelo_lm_step<-step(modelo_lm,direction = "backward",trace=FALSE)
summary(modelo_lm_step)
modelo_lm <- lm(formula(modelo_lm_step),data=train)
summary(modelo_lm)
cat(" AIC:",AIC(modelo_lm))
pred=predict(modelo_lm,train)
cat(" MSE_t:",mean((pred-train$NRO_ACCIDENTES)^2))
pred=predict(modelo_lm,validation)
cat(" MSE_v:",mean((pred-validation$NRO_ACCIDENTES)^2))
hist(df_modelo$NRO_ACCIDENTES)
hist(log(df_modelo$NRO_ACCIDENTES))
modelo_lm_log <- lm(log(NRO_ACCIDENTES)~. - FECHA - PERIODO - MES_1  -
DIA_1 - DIA_NOMBRE_LUNES,data=train)
summary(modelo_lm_log)
cat("AIC_",AIC(modelo_lm_log))
pred=predict(modelo_lm_log,train)
cat(" MSE_t:",mean((exp(pred)-train$NRO_ACCIDENTES)^2))
pred=predict(modelo_lm_log,validation)
cat(" MSE_v:",mean((exp(pred)-validation$NRO_ACCIDENTES)^2))
modelo_lm_log_step<-step(modelo_lm_log,direction = "backward",trace=FALSE)
summary(modelo_lm_log_step)
modelo_lm_log <- lm(formula(modelo_lm_log_step),data=train)
summary(modelo_lm_log)
cat("AIC:",AIC(modelo_lm_log))
pred=predict(modelo_lm_log,train)
cat(" MSE_t",mean((exp(pred)-train$NRO_ACCIDENTES)^2))
pred=predict(modelo_lm_log,validation)
cat(" MSE_v:",mean((exp(pred)-validation$NRO_ACCIDENTES)^2))
#Load Library
library(e1071)
#Scatter Plot
#Regression with SVM
modelsvm = svm(NRO_ACCIDENTES~.-FECHA-PERIODO,train,kernel="radial")
#Predict using SVM regression
pred = predict(modelsvm, train)
mean((pred-train$NRO_ACCIDENTES)^2)
pred = predict(modelsvm, validation)
mean((pred-validation$NRO_ACCIDENTES)^2)
#Load Library
library(e1071)
#Scatter Plot
#Regression with SVM
modelsvm = svm(NRO_ACCIDENTES~.-FECHA-PERIODO,train,kernel="linear")
#Predict using SVM regression
pred = predict(modelsvm, train)
mean((pred-train$NRO_ACCIDENTES)^2)
pred = predict(modelsvm, validation)
mean((pred-validation$NRO_ACCIDENTES)^2)
#Load Library
library(e1071)
#Scatter Plot
#Regression with SVM
modelsvm = svm(formula(modelo_lm_step),train,kernel="linear")
#Predict using SVM regression
pred = predict(modelsvm, train)
mean((pred-train$NRO_ACCIDENTES)^2)
pred = predict(modelsvm, validation)
mean((pred-validation$NRO_ACCIDENTES)^2)
library(randomForest)
rf_model <- randomForest(NRO_ACCIDENTES~.-FECHA-PERIODO,data=train,ntree=2000)
rf_model$importance
pred=predict(rf_model,train)
cat(" MSE_t",mean((pred-train$NRO_ACCIDENTES)^2))
pred=predict(rf_model,validation)
cat(" MSE_v:",mean((pred-validation$NRO_ACCIDENTES)^2))
train_rf <- df[df$PERIODO < 2018,]
validation_rf<- df[df$PERIODO == 2018,]
rf_model <- randomForest(NRO_ACCIDENTES~.-FECHA-DIA,data=train_rf,ntree=2000)
summary(rf_model)
pred=predict(rf_model,train_rf)
cat(" MSE_t",mean((pred-train$NRO_ACCIDENTES)^2))
pred=predict(rf_model,validation_rf)
cat(" MSE_v:",mean((pred-validation$NRO_ACCIDENTES)^2))
df_modelo_importancia_rf=df_modelo[,c('FECHA','PERIODO','FESTIVO','LABORAL','SEMANA_SANTA','MES_1','DIA_NOMBRE_DOMINGO','DIA_NOMBRE_SÁBADO','DIA_NOMBRE_VIERNES','NRO_ACCIDENTES' )]
train <- df_modelo_importancia_rf[df_modelo_importancia_rf$PERIODO < 2018,]
validation<- df_modelo_importancia_rf[df_modelo_importancia_rf$PERIODO == 2018,]
# se genera el modelo de regresión lineal, y como una variable categorica se puede representar como k-1 variables dummies, se elimina una de cada variable inicial
modelo_lm <- lm(NRO_ACCIDENTES~.-FECHA-PERIODO,data=train)
summary(modelo_lm)
cat(" AIC:",AIC(modelo_lm))
pred=predict(modelo_lm,train)
cat(" MSE_t:",mean((pred-train$NRO_ACCIDENTES)^2))
pred=predict(modelo_lm,validation)
cat(" MSE_v:",mean((pred-validation$NRO_ACCIDENTES)^2))
#Load Library
library(e1071)
#Scatter Plot
#Regression with SVM
model_svm = svm(NRO_ACCIDENTES~.-FECHA-PERIODO,train,kernel="linear")
#Predict using SVM regression
pred=predict(model_svm,train)
cat(" MSE_t:",mean((pred-train$NRO_ACCIDENTES)^2))
pred=predict(model_svm,validation)
cat(" MSE_v:",mean((pred-validation$NRO_ACCIDENTES)^2))
modelo_lm_log <- lm(log(NRO_ACCIDENTES) ~ LABORAL + NAVIDAD +
FIN_DE_ANIO + FERIA_DE_FLORES + SEMANA_SANTA + DIA_DE_LA_MADRE +
DI.A_SIN_CARRO + MARATON_DE_LAS_FLORES + MES_10 + MES_11 +
MES_12 + MES_2 + MES_3 + MES_4 + MES_5 + MES_6 + MES_7 +
MES_8 + MES_9 + DIA_16 + DIA_17 + DIA_18 + DIA_7 + DIA_NOMBRE_DOMINGO +
DIA_NOMBRE_JUEVES + DIA_NOMBRE_MIÉRCOLES + DIA_NOMBRE_SÁBADO +
DIA_NOMBRE_VIERNES,data=train)
knitr::opts_chunk$set(echo = TRUE)
wd="C:/Users/sga96/OneDrive/Accidentalidad-Medellin"
setwd(wd)
df_2014=read.csv("./Datasets/Accidentalidad_georreferenciada_2014.csv",strip.white=TRUE,
encoding = "UTF-8")
df_2015=read.csv("./Datasets/Accidentalidad_georreferenciada_2015.csv",strip.white=TRUE,
encoding = "UTF-8")
df_2016=read.csv("./Datasets/Accidentalidad_georreferenciada_2016.csv",strip.white=TRUE,
encoding = "UTF-8")
df_2017=read.csv("./Datasets/Accidentalidad_georreferenciada_2017.csv",strip.white=TRUE,
encoding = "UTF-8")
df_2018=read.csv("./Datasets/Accidentalidad_georreferenciada_2018.csv",strip.white=TRUE,
encoding = "UTF-8")
df_inicial = rbind(df_2014,df_2015,df_2016,df_2017,df_2018)
unique(df_inicial$GRAVEDAD)
# se organiza la columna de la variable fecha
library(tidyr)
df <- separate(data = df_inicial, col = FECHA, into = c("FECHA", "Sobrante"), sep = " ")
df$FECHA <- as.Date(df$FECHA, format = "%Y/%m/%d")
# Se limpian los datos y de la columna CLASE y se agrupan en 3 categorías
df$CLASE[df$CLASE=='Choque'] <- "Choque"
df$CLASE[df$CLASE=='Volcamiento'] <- "Otro"
df$CLASE[df$CLASE=='Atropello'] <- "Atropello"
df$CLASE[df$CLASE=='Caída de Ocupante'] <- "Otro"
df$CLASE[df$CLASE=='Caida Ocupante'] <- "Otro"
df$CLASE[df$CLASE=='Caida de Ocupante'] <- "Otro"
df$CLASE[df$CLASE=='Caída Ocupante'] <- "Otro"
df$CLASE[df$CLASE=='Choque y Atropello'] <- "Choque"
df$CLASE[df$CLASE=='otro'] <- "Otro"
df$CLASE[df$CLASE=='Incendio'] <- "Otro"
df$CLASE[df$CLASE==""] <- "Otro"
df$GRAVEDAD[df$GRAVEDAD=="MUERTO"] <- "PERSONA AFECTADA"
df$GRAVEDAD[df$GRAVEDAD=="HERIDO"] <- "PERSONA AFECTADA"
#Se agrupa por clase y por día
library(dplyr,warn.conflicts = FALSE)
df <-  df %>%
group_by(FECHA,PERIODO,MES,DIA,DIA_NOMBRE,GRAVEDAD) %>%
summarize(NRO_ACCIDENTES=n())
#se crea la variable año de referencia
df$ANIO_REFERENCIA <- df$PERIODO -2014
#Se agrega variable semana
df$SEMANA <- format(df$FECHA,"%V")
# Se agregan  variable de FESTIVO al modelo
festivos=read.csv("./Datasets/Festivos.csv")
festivos$FECHA <- as.Date(festivos$FECHA, format = "%Y-%m-%d")
df <- merge(x = df, y = festivos, by = "FECHA", all.x = TRUE)
# Se agrega variable LABORAL al modelo
laborales=c('LUNES','MARTES','MIÉRCOLES','JUEVES','VIERNES')
df$LABORAL=ifelse(df$DIA_NOMBRE %in% laborales,1,0)
df$LABORAL=ifelse(df$FESTIVO == 1,0,df$LABORAL)
#Se agregan fechas especiales
df_fechas_especiales=read.csv("./Datasets/Fechas especiales.csv",strip.white=TRUE,
encoding = "UTF-8")
df_fechas_especiales$FECHA <- as.Date(df_fechas_especiales$FECHA, format = "%Y-%m-%d")
df <- merge(x = df, y = df_fechas_especiales, by = "FECHA", all.x = TRUE)
#Se selecciona solo la clase de tipo SOLO DAÑOS
df <- df[df$GRAVEDAD == 'SOLO DAÑOS',]
df$GRAVEDAD <- NULL
library(fastDummies)
df_modelo <- dummy_cols(df, select_columns = c('MES','SEMANA','DIA','DIA_NOMBRE'))
df_modelo$MES <- NULL
df_modelo$SEMANA <- NULL
df_modelo$DIA <- NULL
df_modelo$DIA_NOMBRE <- NULL
# se divide el conjunto de datos en entrenamiento y validación
train <- df_modelo[df_modelo$PERIODO < 2018,]
validation<- df_modelo[df_modelo$PERIODO == 2018,]
# se genera el modelo de regresión linea, y como una variable categorica se puede representar como k-1 variables dummies, se elimina una de cada variable inicial
modelo_lm <- lm(NRO_ACCIDENTES~.-FECHA-PERIODO-MES_1-SEMANA_01-DIA_1-DIA_NOMBRE_LUNES,data=train)
summary(modelo_lm)
cat(" AIC:",AIC(modelo_lm))
pred=predict(modelo_lm,train)
cat(" MSE_t:",mean((pred-train$NRO_ACCIDENTES)^2))
pred=predict(modelo_lm,validation)
cat(" MSE_v:",mean((pred-validation$NRO_ACCIDENTES)^2))
plot(pred,validation$NRO_ACCIDENTES,xlab="Predichos",ylab="Observados",las=1)
abline(a=0,b=1,lwd=2)
grid()
modelo_lm_step<-step(modelo_lm,direction = "backward",trace=FALSE)
summary(modelo_lm_step)
cat(" AIC:",AIC(modelo_lm_step))
pred=predict(modelo_lm_step,train)
cat(" MSE_t:",mean((pred-train$NRO_ACCIDENTES)^2))
pred=predict(modelo_lm_step,validation)
cat(" MSE_v:",mean((pred-validation$NRO_ACCIDENTES)^2))
library(glmnet)
X <-model.matrix(NRO_ACCIDENTES~.- FECHA - PERIODO - MES_1 -
SEMANA_01 - DIA_1 - DIA_NOMBRE_LUNES,train)[,-1]
y <- train$NRO_ACCIDENTES
grid<-10^seq(10,-4,length=100)
modelo_lasso<-cv.glmnet(X,y,alpha=1,lambda=grid) # alpha=1 es lasso
lambda_opt<-modelo_lasso$lambda.min
modelo_lasso<-glmnet(X,y,alpha=1,lambda = lambda_opt)
pred<-predict(modelo_lasso,model.matrix(NRO_ACCIDENTES~.- FECHA - PERIODO - MES_1 -
SEMANA_01 - DIA_1 - DIA_NOMBRE_LUNES,train)[,-1])
cat(" MSE_t:",mean((pred-train$NRO_ACCIDENTES)^2))
pred<-predict(modelo_lasso,model.matrix(NRO_ACCIDENTES~.- FECHA - PERIODO - MES_1 -
SEMANA_01 - DIA_1 - DIA_NOMBRE_LUNES,validation)[,-1])
cat(" MSE_v:",mean((pred-validation$NRO_ACCIDENTES)^2))
library(randomForest)
rf_model <- randomForest(NRO_ACCIDENTES~.-FECHA-PERIODO,data=train,ntree=2000)
pred=predict(rf_model,train)
cat(" MSE_t",mean((pred-train$NRO_ACCIDENTES)^2))
pred=predict( rf_model,validation)
cat(" MSE_v:",mean((pred-validation$NRO_ACCIDENTES)^2))
df_modelo <- dummy_cols(df, select_columns = c('MES','DIA','DIA_NOMBRE'))
df_modelo$MES <- NULL
df_modelo$SEMANA <- NULL
df_modelo$DIA <- NULL
df_modelo$DIA_NOMBRE <- NULL
# se divide el conjunto de datos en entrenamiento y validación
train <- df_modelo[df_modelo$PERIODO < 2018,]
validation<- df_modelo[df_modelo$PERIODO == 2018,]
# se genera el modelo de regresión lineal, y como una variable categorica se puede representar como k-1 variables dummies, se elimina una de cada variable inicial
modelo_lm <- lm(NRO_ACCIDENTES~.-FECHA-PERIODO-MES_1-DIA_1-DIA_NOMBRE_LUNES,data=train)
summary(modelo_lm)
cat(" AIC:",AIC(modelo_lm))
pred=predict(modelo_lm,train)
cat(" MSE_t:",mean((pred-train$NRO_ACCIDENTES)^2))
pred=predict(modelo_lm,validation)
cat(" MSE_v:",mean((pred-validation$NRO_ACCIDENTES)^2))
#se elimina la variable ANIO_REFERENCIA
df_modelo$ANIO_REFERENCIA <- NULL
#se divide el conjunto de datos en entrenamiento y validación
train <- df_modelo[df_modelo$PERIODO < 2018,]
validation<- df_modelo[df_modelo$PERIODO == 2018,]
# se genera el modelo de regresión linea, y como una variable categorica se puede representar como k-1 variables dummues, se elimina una de cada variable inicial
modelo_lm <- lm(NRO_ACCIDENTES~.-FECHA-PERIODO-MES_1-DIA_1-DIA_NOMBRE_LUNES ,data=train)
summary(modelo_lm)
cat(" AIC:",AIC(modelo_lm))
pred=predict(modelo_lm,train)
cat(" MSE_t:",mean((pred-train$NRO_ACCIDENTES)^2))
pred=predict(modelo_lm,validation)
cat(" MSE_v:",mean((pred-validation$NRO_ACCIDENTES)^2))
modelo_lm_step<-step(modelo_lm,direction = "backward",trace=FALSE)
summary(modelo_lm_step)
modelo_lm <- lm(formula(modelo_lm_step),data=train)
summary(modelo_lm)
cat(" AIC:",AIC(modelo_lm))
pred=predict(modelo_lm,train)
cat(" MSE_t:",mean((pred-train$NRO_ACCIDENTES)^2))
pred=predict(modelo_lm,validation)
cat(" MSE_v:",mean((pred-validation$NRO_ACCIDENTES)^2))
hist(df_modelo$NRO_ACCIDENTES)
hist(log(df_modelo$NRO_ACCIDENTES))
modelo_lm_log <- lm(log(NRO_ACCIDENTES)~. - FECHA - PERIODO - MES_1  -
DIA_1 - DIA_NOMBRE_LUNES,data=train)
summary(modelo_lm_log)
cat("AIC_",AIC(modelo_lm_log))
pred=predict(modelo_lm_log,train)
cat(" MSE_t:",mean((exp(pred)-train$NRO_ACCIDENTES)^2))
pred=predict(modelo_lm_log,validation)
cat(" MSE_v:",mean((exp(pred)-validation$NRO_ACCIDENTES)^2))
modelo_lm_log_step<-step(modelo_lm_log,direction = "backward",trace=FALSE)
summary(modelo_lm_log_step)
modelo_lm_log <- lm(log(NRO_ACCIDENTES) ~ LABORAL + NAVIDAD +
FIN_DE_ANIO + FERIA_DE_FLORES + SEMANA_SANTA + DIA_DE_LA_MADRE +
DI.A_SIN_CARRO + MARATON_DE_LAS_FLORES + MES_10 + MES_11 +
MES_12 + MES_2 + MES_3 + MES_4 + MES_5 + MES_6 + MES_7 +
MES_8 + MES_9 + DIA_16 + DIA_17 + DIA_18 + DIA_7 + DIA_NOMBRE_DOMINGO +
DIA_NOMBRE_JUEVES + DIA_NOMBRE_MIÉRCOLES + DIA_NOMBRE_SÁBADO +
DIA_NOMBRE_VIERNES,data=train)
summary(modelo_lm_log)
cat("AIC:",AIC(modelo_lm_log))
pred=predict(modelo_lm_log,train)
cat(" MSE_t",mean((exp(pred)-train$NRO_ACCIDENTES)^2))
pred=predict(modelo_lm_log,validation)
cat(" MSE_v:",mean((exp(pred)-validation$NRO_ACCIDENTES)^2))
knitr::opts_chunk$set(echo = TRUE)
wd="C:/Users/sga96/OneDrive/Accidentalidad-Medellin"
setwd(wd)
df_2014=read.csv("./Datasets/Accidentalidad_georreferenciada_2014.csv",strip.white=TRUE,
encoding = "UTF-8")
df_2015=read.csv("./Datasets/Accidentalidad_georreferenciada_2015.csv",strip.white=TRUE,
encoding = "UTF-8")
df_2016=read.csv("./Datasets/Accidentalidad_georreferenciada_2016.csv",strip.white=TRUE,
encoding = "UTF-8")
df_2017=read.csv("./Datasets/Accidentalidad_georreferenciada_2017.csv",strip.white=TRUE,
encoding = "UTF-8")
df_2018=read.csv("./Datasets/Accidentalidad_georreferenciada_2018.csv",strip.white=TRUE,
encoding = "UTF-8")
df_inicial = rbind(df_2014,df_2015,df_2016,df_2017,df_2018)
wd="C:/Users/sga96/OneDrive/Accidentalidad-Medellin"
setwd(wd)
df_2014=read.csv("C:/Users/sga96/OneDrive/Accidentalidad-Medellin/Datasets/Accidentalidad_georreferenciada_2014.csv",strip.white=TRUE,
encoding = "UTF-8")
df_2015=read.csv("./Datasets/Accidentalidad_georreferenciada_2015.csv",strip.white=TRUE,
encoding = "UTF-8")
df_2016=read.csv("./Datasets/Accidentalidad_georreferenciada_2016.csv",strip.white=TRUE,
encoding = "UTF-8")
df_2017=read.csv("./Datasets/Accidentalidad_georreferenciada_2017.csv",strip.white=TRUE,
encoding = "UTF-8")
df_2018=read.csv("./Datasets/Accidentalidad_georreferenciada_2018.csv",strip.white=TRUE,
encoding = "UTF-8")
df_inicial = rbind(df_2014,df_2015,df_2016,df_2017,df_2018)
df_2014=read.csv("C:/Users/sga96/OneDrive/Accidentalidad-Medellin/Datasets/Accidentalidad_georreferenciada_2014.csv",strip.white=TRUE,
encoding = "UTF-8")
df_2014=read.csv("C:/Users/sga96/OneDrive/Accidentalidad-Medellin/Datasets/Accidentalidad_georreferenciada_2014.csv",strip.white=TRUE,
encoding = "UTF-8")
read.csv('"  df_2014=read.csv("C:/Users/sga96/OneDrive/Accidentalidad-Medellin/df_modelo_mes.csv")')
read.csv('"  df_2014=read.csv("C:/Users/sga96/OneDrive/Accidentalidad-Medellin/df_persona_semanal.csv")')
read.csv('"  df_2014=read.csv("C:/Users/sga96/OneDrive/Accidentalidad-Medellin/web_app/df_persona_semanal.csv")')
df_2014=read.csv("C:/Users/sga96/OneDrive/Accidentalidad-Medellin/Datasets/Accidentalidad_georreferenciada_2014.csv",strip.white=TRUE,
encoding = "UTF-8")
df_2014=read.csv("C:/Users/sga96/OneDrive/Accidentalidad-Medellin/web_app/barrios_model.csv",strip.white=TRUE,
encoding = "UTF-8")
df_2014=read.csv("C:/Users/sga96/OneDrive/Accidentalidad-Medellin/web_app/df_persona_semanal.csv",strip.white=TRUE,
encoding = "UTF-8")
df_2014=read.csv("C:/Users/sga96/OneDrive/Accidentalidad-Medellin/web_app/barrios_model.csv",strip.white=TRUE,
encoding = "UTF-8")
library(shiny); runApp('C:/Users/sga96/OneDrive/Accidentalidad-Medellin/web_app/prueba2.R')
barrios_med1 <- readOGR('"C:/Users/sga96/OneDrive/Accidentalidad-Medellin/web_app/barrios_med_1/barrios_med1.shp', layer = "barrios_med1", encoding = "UTF-8", use_iconv=TRUE)
shiny::runApp('C:/Users/sga96/OneDrive/Accidentalidad-Medellin/web_app')
runApp()
runApp('C:/Users/sga96/OneDrive/Accidentalidad-Medellin/web_app')
runApp('C:/Users/sga96/OneDrive/Accidentalidad-Medellin/web_app')
runApp()
runApp('C:/Users/sga96/OneDrive/Accidentalidad-Medellin/web_app')
runApp('prueba2.R')
runApp('C:/Users/sga96/OneDrive/Accidentalidad-Medellin/web_app/prueba2.R')
runApp('C:/Users/sga96/OneDrive/Accidentalidad-Medellin/web_app')
runApp('C:/Users/sga96/OneDrive/Accidentalidad-Medellin/web_app')
runApp('C:/Users/sga96/OneDrive/Accidentalidad-Medellin/web_app')
runApp('C:/Users/sga96/OneDrive/Accidentalidad-Medellin/web_app')
runApp('C:/Users/sga96/OneDrive/Accidentalidad-Medellin/web_app')
runApp('C:/Users/sga96/OneDrive/Accidentalidad-Medellin/web_app')
runApp('C:/Users/sga96/OneDrive/Accidentalidad-Medellin/web_app')
runApp('C:/Users/sga96/OneDrive/Accidentalidad-Medellin/web_app')
runApp('C:/Users/sga96/OneDrive/Accidentalidad-Medellin/web_app')
runApp('C:/Users/sga96/OneDrive/Accidentalidad-Medellin/web_app')
runApp('C:/Users/sga96/OneDrive/Accidentalidad-Medellin/web_app')
runApp('C:/Users/sga96/OneDrive/Accidentalidad-Medellin/web_app')
runApp('C:/Users/sga96/OneDrive/Accidentalidad-Medellin/web_app')
runApp('C:/Users/sga96/OneDrive/Accidentalidad-Medellin/web_app')
runApp('C:/Users/sga96/OneDrive/Accidentalidad-Medellin/web_app/prueba2.R')
runApp('C:/Users/sga96/OneDrive/Accidentalidad-Medellin/web_app')
runApp('C:/Users/sga96/OneDrive/Accidentalidad-Medellin/web_app')
runApp('C:/Users/sga96/OneDrive/Accidentalidad-Medellin/web_app')
runApp('C:/Users/sga96/OneDrive/Accidentalidad-Medellin/web_app')
runApp('C:/Users/sga96/OneDrive/Accidentalidad-Medellin/web_app')
shiny::runApp('C:/Users/sga96/OneDrive/Accidentalidad-Medellin/web_app')
runApp('C:/Users/sga96/OneDrive/Accidentalidad-Medellin/web_app')
runApp()
runApp('C:/Users/sga96/OneDrive/Accidentalidad-Medellin/web_app')
runApp()
shiny::runApp('C:/Users/sga96/OneDrive/Accidentalidad-Medellin/web_app')
runApp()
runApp('C:/Users/sga96/OneDrive/Accidentalidad-Medellin/web_app')
runApp('C:/Users/sga96/OneDrive/Accidentalidad-Medellin/web_app')
runApp('C:/Users/sga96/OneDrive/Accidentalidad-Medellin/web_app')
runApp()
runApp('C:/Users/sga96/OneDrive/Accidentalidad-Medellin/web_app')
runApp('C:/Users/sga96/OneDrive/Accidentalidad-Medellin/web_app')
runApp('C:/Users/sga96/OneDrive/Accidentalidad-Medellin/web_app')
runApp('C:/Users/sga96/OneDrive/Accidentalidad-Medellin/web_app')
barrios
runApp('C:/Users/sga96/OneDrive/Accidentalidad-Medellin/web_app')
knitr::opts_chunk$set(echo = TRUE)
wd="C:/Users/Juan.Palacio/Analitica predictiva/Accidentalidad-Medellin"
setwd(wd)
knitr::opts_chunk$set(echo = TRUE)
wd="C:/Users/sga96/OneDrive/Accidentalidad-Medellin"
setwd(wd)
df_2014=read.csv("./Datasets/Accidentalidad_georreferenciada_2014.csv",strip.white=TRUE,
encoding = "UTF-8")
df_2015=read.csv("./Datasets/Accidentalidad_georreferenciada_2015.csv",strip.white=TRUE,
encoding = "UTF-8")
df_2016=read.csv("./Datasets/Accidentalidad_georreferenciada_2016.csv",strip.white=TRUE,
encoding = "UTF-8")
df_2017=read.csv("./Datasets/Accidentalidad_georreferenciada_2017.csv",strip.white=TRUE,
encoding = "UTF-8")
df_2018=read.csv("./Datasets/Accidentalidad_georreferenciada_2018.csv",strip.white=TRUE,
encoding = "UTF-8")
df_inicial = rbind(df_2014,df_2015,df_2016,df_2017,df_2018)
unique(df_inicial$GRAVEDAD)
# se organiza la columna de la variable fecha
library(tidyr)
df <- separate(data = df_inicial, col = FECHA, into = c("FECHA", "Sobrante"), sep = " ")
df$FECHA <- as.Date(df$FECHA, format = "%Y/%m/%d")
# Se limpian los datos y de la columna CLASE y se agrupan en 3 categorías
df$CLASE[df$CLASE=='Choque'] <- "Choque"
df$CLASE[df$CLASE=='Volcamiento'] <- "Otro"
df$CLASE[df$CLASE=='Atropello'] <- "Atropello"
df$CLASE[df$CLASE=='Caída de Ocupante'] <- "Otro"
df$CLASE[df$CLASE=='Caida Ocupante'] <- "Otro"
df$CLASE[df$CLASE=='Caida de Ocupante'] <- "Otro"
df$CLASE[df$CLASE=='Caída Ocupante'] <- "Otro"
df$CLASE[df$CLASE=='Choque y Atropello'] <- "Choque"
df$CLASE[df$CLASE=='otro'] <- "Otro"
df$CLASE[df$CLASE=='Incendio'] <- "Otro"
df$CLASE[df$CLASE==""] <- "Otro"
df$GRAVEDAD[df$GRAVEDAD=="MUERTO"] <- "PERSONA INVOLUCRADA"
df$GRAVEDAD[df$GRAVEDAD=="HERIDO"] <- "PERSONA INVOLUCRADA"
#Se agrupa por clase y por día
library(dplyr,warn.conflicts = FALSE)
df <-  df %>%
group_by(FECHA,PERIODO,MES,DIA,DIA_NOMBRE,GRAVEDAD) %>%
summarize(NRO_ACCIDENTES=n())
#se crea la variable año de referencia
#df$ANIO_REFERENCIA <- df$PERIODO -2014
#Se agrega variable semana
df$SEMANA <- format(df$FECHA,"%V")
# Se agregan  variable de FESTIVO al modelo
festivos=read.csv("./Datasets/Festivos.csv")
festivos$FECHA <- as.Date(festivos$FECHA, format = "%Y-%m-%d")
df <- merge(x = df, y = festivos, by = "FECHA", all.x = TRUE)
# Se agrega variable LABORAL al modelo
laborales=c('LUNES','MARTES','MIÉRCOLES','JUEVES','VIERNES')
df$LABORAL=ifelse(df$DIA_NOMBRE %in% laborales,1,0)
df$LABORAL=ifelse(df$FESTIVO == 1,0,df$LABORAL)
#Se agregan fechas especiales
#df_fechas_especiales=read.csv("./Datasets/Fechas especiales.csv",strip.white=TRUE,
#  encoding = "UTF-8")
#df_fechas_especiales$FECHA <- as.Date(df_fechas_especiales$FECHA, format = "%Y-%m-%d")
#df <- merge(x = df, y = df_fechas_especiales, by = "FECHA", all.x = TRUE)
library(ggplot2)
# Barplot
ggplot(df, aes(x=PERIODO, y=NRO_ACCIDENTES)) +
geom_bar(stat = "identity")
ggplot(df, aes(x=factor(MES), y=NRO_ACCIDENTES)) +
geom_bar(stat = "identity")
hist(df_inicial$DIA,
main="Histograma por dia del mes",
las=1,
breaks=5)
pl <- ggplot(df, aes(x=factor(GRAVEDAD),y=NRO_ACCIDENTES))
pl + geom_boxplot()
#Se selecciona solo la clase de tipo SOLO DAÑOS
df <- df[df$GRAVEDAD == 'PERSONA INVOLUCRADA',]
df$GRAVEDAD <- NULL
df_mes <-  df %>%
group_by(PERIODO,MES) %>%
summarize(NRO_ACCIDENTES= sum(NRO_ACCIDENTES),Total_festivos = sum(FESTIVO), Total_laborales= sum(LABORAL))
library(fastDummies)
df_mes <- dummy_cols(df_mes, select_columns = c('MES'))
df_mes$MES <- NULL
df_semana <-  df %>%
group_by(PERIODO,SEMANA) %>%
summarize(NRO_ACCIDENTES= sum(NRO_ACCIDENTES),Total_festivos = sum(FESTIVO), Total_laborales= sum(LABORAL))
df_semana <- dummy_cols(df_semana, select_columns = c('SEMANA'))
df_semana$SEMANA <- NULL
df_mes$Total_festivos <- scale(df_mes$Total_festivos)
df_mes$Total_laborales <- scale(df_mes$Total_laborales)
df_mes
df_semana$Total_festivos <- scale(df_semana$Total_festivos)
df_semana$Total_laborales <- scale(df_semana$Total_laborales)
df_semana
modelo_lm_log <- lm(log(NRO_ACCIDENTES)~. - PERIODO - MES_7,data=train)
train <- df_semana[df_semana$PERIODO < 2018,]
validation<- df_semana[df_semana$PERIODO == 2018,]
modelo_lm_log <- lm(log(NRO_ACCIDENTES)~. - PERIODO - MES_7,data=train)
View(df_semana)
View(df_semana)
shiny::runApp('C:/Users/sga96/OneDrive/Accidentalidad-Medellin/web_app')
runApp('C:/Users/sga96/OneDrive/Accidentalidad-Medellin/web_app')
runApp('C:/Users/sga96/OneDrive/Accidentalidad-Medellin/web_app')
input$choose
runApp('C:/Users/sga96/OneDrive/Accidentalidad-Medellin/web_app')
runApp('C:/Users/sga96/OneDrive/Accidentalidad-Medellin/web_app')
runApp('C:/Users/sga96/OneDrive/Accidentalidad-Medellin/web_app')
shiny::runApp('C:/Users/sga96/OneDrive/Accidentalidad-Medellin/web_app')
runApp('C:/Users/sga96/OneDrive/Accidentalidad-Medellin/web_app')
shiny::runApp('C:/Users/sga96/OneDrive/Accidentalidad-Medellin/web_app')
